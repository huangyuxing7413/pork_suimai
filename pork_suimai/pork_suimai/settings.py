"""
Django settings for pork_suimai project.

# pork_suimai项目的Django配置。

Generated by 'django-admin startproject' using Django 2.0.7.

由命令django-admin startproject' using Django 2.0.7.生成。

For more information on this file, see
有关此文件的更多信息可查阅以下的网址
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
有关设置和参数可查阅以下的网址
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# 创建项目的目录路径查询配置，例如说：刚才创建的templates里面的html文件需要靠这个配置来寻找，
# 不太懂的话可以这样理解，我们把html文件都放在templates目录中，
# 项目寻找html文件都会搜索templates中寻找该文件。
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# 快速启动项目，不适宜在生产环境中使用
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 安全警告：请妥善保管好下面的密钥
SECRET_KEY = 'r-5#p5$_pb2q#3f6g##(v&^z9m!e#19x^&dg!^us9eqh^*f-g_'

# SECURITY WARNING: don't run with debug turned on in production!
# 安全警告：不要在生产环境中打开，我们现在在开发环境，默认打开吧。
# 例如说我们在开发环境中，经常修改代码，当我们修改完代码后，不需要重启项目，就可以看到修改后的结果了
DEBUG = True

# 允许的主机，大概意思是允许的主机访问的列表，允许那台主机访问，这里默认为空
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '.pork_suimai.com']


# Application definition
# 定义应用，这里是放置应用的列表，马上用到，注意提示

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # 第三方库                                                  # 这里有改动
    'ckeditor',         # ckeditor是一个富文本编辑器
    'ckeditor_uploader',# ckeditor额外的包，可以上传文件

    # 自定义应用，写这条内容的话会导致项目暂时无法运行，大概到写完应用后方可运行，
    # 按照我的步骤来写，大概到day3的时候就会恢复正常
    # 以后我们写好的应用都要放到这里进行配置,例如说：下一篇文章我们创建了一个名为blog的应用，
    # 因为我们要把blog放到apps目录中，所以要加上apps再加个点.
    'apps.blog',
    'apps.diy_count',

]

# 中间件
MIDDLEWARE = [          # 这里面的内容很绕口，我就翻译主要的内容吧
    'django.middleware.security.SecurityMiddleware',        # django的中间件模块中的安全的安全中间件
    'django.contrib.sessions.middleware.SessionMiddleware', # 会话
    'django.middleware.common.CommonMiddleware',            # 共同
    'django.middleware.csrf.CsrfViewMiddleware',            # csrf 可以理解为安全检查
    'django.contrib.auth.middleware.AuthenticationMiddleware', # auth，用户验证方面的中间件
    'django.contrib.messages.middleware.MessageMiddleware',     # 消息，发送消息方面的中间件
    'django.middleware.clickjacking.XFrameOptionsMiddleware',   # 点击劫持的中间件
]

ROOT_URLCONF = 'pork_suimai.urls'   # 总路由的路径配置

# 模板文件的配置
TEMPLATES = [
    {   # 后端  ： 这里调用了django的模板包中的后端的django的DjangoTemplates类方法
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 目录，从哪里寻找到模板的目录，目录名为templates
        'DIRS': [os.path.join(BASE_DIR, 'templates'),],     # 这里有改动
        'APP_DIRS': True, # 是否寻找在app中的templates目录，这里是：是的
        # 配置
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',     # debug
                'django.template.context_processors.request',   # 请求
                'django.contrib.auth.context_processors.auth',  # 认证
                'django.contrib.messages.context_processors.messages',# 消息
            ],
        },
    },
]

# wsgi的路径配置
WSGI_APPLICATION = 'pork_suimai.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
# 数据库配置，默认使用sqlite3,可以换其他关系型数据库
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'pork_suimai',
        'HOST':'127.0.0.1',
        'PORT':'3306',
        'USER':'pork_suimai',
        'PASSWORD':'mnb5523766',
    }
}


# Password validation
# 密码认证
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# 国际化
# https://docs.djangoproject.com/en/2.0/topics/i18n/
#  语言 代码  我们是中国人， 这里改成'zh-hans' # 简体中文 或者  'zh-hant' # 繁體中文
LANGUAGE_CODE = 'zh-hans'                             # 这里有改动

# 时区 改成亚洲/上海
TIME_ZONE = 'Asia/Shanghai'                         # 这里有改动

USE_I18N = True

USE_L10N = True

USE_TZ = False      # 关闭国际时间                      # 这里有改动


# 静态文件收集
# 有改动 添加 STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),]
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'                  # 这里有改动，以后添加配置在下面添加即可

# 这是让Django找到静态文件的路径设置
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),]

# media
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# 配置ckeditor上传文件路径
CKEDITOR_UPLOAD_PATH = 'upload/'
